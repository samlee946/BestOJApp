package com.example;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.TreeNode2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TREE_NODE2.
*/
public class TreeNode2Dao extends AbstractDao<TreeNode2, Void> {

    public static final String TABLENAME = "TREE_NODE2";

    /**
     * Properties of entity TreeNode2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property ParentId = new Property(1, Long.class, "parentId", false, "PARENT_ID");
        public final static Property Weight = new Property(2, Integer.class, "weight", false, "WEIGHT");
        public final static Property ProblemIdLinked = new Property(3, Integer.class, "problemIdLinked", false, "PROBLEM_ID_LINKED");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
    };


    public TreeNode2Dao(DaoConfig config) {
        super(config);
    }
    
    public TreeNode2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TREE_NODE2' (" + //
                "'ID' INTEGER," + // 0: id
                "'PARENT_ID' INTEGER," + // 1: parentId
                "'WEIGHT' INTEGER," + // 2: weight
                "'PROBLEM_ID_LINKED' INTEGER," + // 3: problemIdLinked
                "'NAME' TEXT," + // 4: name
                "'TYPE' INTEGER);"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TREE_NODE2'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TreeNode2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(2, parentId);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(3, weight);
        }
 
        Integer problemIdLinked = entity.getProblemIdLinked();
        if (problemIdLinked != null) {
            stmt.bindLong(4, problemIdLinked);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TreeNode2 readEntity(Cursor cursor, int offset) {
        TreeNode2 entity = new TreeNode2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // parentId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // weight
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // problemIdLinked
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TreeNode2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setWeight(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setProblemIdLinked(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TreeNode2 entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TreeNode2 entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
