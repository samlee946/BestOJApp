package com.exam;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.exam.Exam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXAM.
*/
public class ExamDao extends AbstractDao<Exam, Long> {

    public static final String TABLENAME = "EXAM";

    /**
     * Properties of entity Exam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property ExamId = new Property(1, Long.class, "examId", false, "EXAM_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Tries = new Property(3, Integer.class, "tries", false, "TRIES");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property StartTime = new Property(5, String.class, "startTime", false, "START_TIME");
        public final static Property Last = new Property(6, Integer.class, "last", false, "LAST");
        public final static Property Score = new Property(7, Double.class, "score", false, "SCORE");
    };


    public ExamDao(DaoConfig config) {
        super(config);
    }
    
    public ExamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXAM' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'EXAM_ID' INTEGER," + // 1: examId
                "'TITLE' TEXT," + // 2: title
                "'TRIES' INTEGER," + // 3: tries
                "'DESCRIPTION' TEXT," + // 4: description
                "'START_TIME' TEXT," + // 5: startTime
                "'LAST' INTEGER," + // 6: last
                "'SCORE' REAL);"); // 7: score
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXAM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Exam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long examId = entity.getExamId();
        if (examId != null) {
            stmt.bindLong(2, examId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        Integer tries = entity.getTries();
        if (tries != null) {
            stmt.bindLong(4, tries);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(6, startTime);
        }
 
        Integer last = entity.getLast();
        if (last != null) {
            stmt.bindLong(7, last);
        }
 
        Double score = entity.getScore();
        if (score != null) {
            stmt.bindDouble(8, score);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Exam readEntity(Cursor cursor, int offset) {
        Exam entity = new Exam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // examId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tries
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // last
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7) // score
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Exam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExamId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTries(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLast(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setScore(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Exam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Exam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
