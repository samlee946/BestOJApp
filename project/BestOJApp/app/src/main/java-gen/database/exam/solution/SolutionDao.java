package database.exam.solution;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import database.exam.solution.Solution;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SOLUTION.
*/
public class SolutionDao extends AbstractDao<Solution, Long> {

    public static final String TABLENAME = "SOLUTION";

    /**
     * Properties of entity Solution.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property ProblemId = new Property(1, Long.class, "problemId", false, "PROBLEM_ID");
        public final static Property Result = new Property(2, Integer.class, "result", false, "RESULT");
        public final static Property RunningMemory = new Property(3, Integer.class, "runningMemory", false, "RUNNING_MEMORY");
        public final static Property RunningTime = new Property(4, Integer.class, "runningTime", false, "RUNNING_TIME");
        public final static Property Echo = new Property(5, Integer.class, "echo", false, "ECHO");
        public final static Property Detail = new Property(6, String.class, "detail", false, "DETAIL");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property SubmitTime = new Property(8, String.class, "submitTime", false, "SUBMIT_TIME");
    };


    public SolutionDao(DaoConfig config) {
        super(config);
    }
    
    public SolutionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SOLUTION' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'PROBLEM_ID' INTEGER," + // 1: problemId
                "'RESULT' INTEGER," + // 2: result
                "'RUNNING_MEMORY' INTEGER," + // 3: runningMemory
                "'RUNNING_TIME' INTEGER," + // 4: runningTime
                "'ECHO' INTEGER," + // 5: echo
                "'DETAIL' TEXT," + // 6: detail
                "'SOURCE' TEXT," + // 7: source
                "'SUBMIT_TIME' TEXT);"); // 8: submitTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SOLUTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Solution entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long problemId = entity.getProblemId();
        if (problemId != null) {
            stmt.bindLong(2, problemId);
        }
 
        Integer result = entity.getResult();
        if (result != null) {
            stmt.bindLong(3, result);
        }
 
        Integer runningMemory = entity.getRunningMemory();
        if (runningMemory != null) {
            stmt.bindLong(4, runningMemory);
        }
 
        Integer runningTime = entity.getRunningTime();
        if (runningTime != null) {
            stmt.bindLong(5, runningTime);
        }
 
        Integer echo = entity.getEcho();
        if (echo != null) {
            stmt.bindLong(6, echo);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(7, detail);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String submitTime = entity.getSubmitTime();
        if (submitTime != null) {
            stmt.bindString(9, submitTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Solution readEntity(Cursor cursor, int offset) {
        Solution entity = new Solution( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // problemId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // result
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // runningMemory
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // runningTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // echo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // detail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // submitTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Solution entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProblemId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setResult(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRunningMemory(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRunningTime(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEcho(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDetail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubmitTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Solution entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Solution entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
